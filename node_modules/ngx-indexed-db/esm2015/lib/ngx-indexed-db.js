/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-indexed-db.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function ObjectStoreMeta() { }
if (false) {
    /** @type {?} */
    ObjectStoreMeta.prototype.store;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeConfig;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeSchema;
}
/**
 * @record
 */
export function ObjectStoreSchema() { }
if (false) {
    /** @type {?} */
    ObjectStoreSchema.prototype.name;
    /** @type {?} */
    ObjectStoreSchema.prototype.keypath;
    /** @type {?} */
    ObjectStoreSchema.prototype.options;
}
/**
 * @record
 */
export function IndexDetails() { }
if (false) {
    /** @type {?} */
    IndexDetails.prototype.indexName;
    /** @type {?} */
    IndexDetails.prototype.order;
}
/**
 * @record
 * @template T
 */
export function RequestEventTarget() { }
if (false) {
    /** @type {?} */
    RequestEventTarget.prototype.result;
}
/**
 * @record
 * @template T
 */
export function RequestEvent() { }
if (false) {
    /** @type {?} */
    RequestEvent.prototype.target;
}
/** @type {?} */
const indexedDB = window.indexedDB || ((/** @type {?} */ (window))).mozIndexedDB || ((/** @type {?} */ (window))).webkitIndexedDB || ((/** @type {?} */ (window))).msIndexedDB;
/**
 * @param {?} dbName
 * @param {?} version
 * @param {?=} upgradeCallback
 * @return {?}
 */
export function openDatabase(dbName, version, upgradeCallback) {
    return new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    (resolve, reject) => {
        /** @type {?} */
        const request = indexedDB.open(dbName, version);
        /** @type {?} */
        let db;
        request.onsuccess = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            db = request.result;
            resolve(db);
        });
        request.onerror = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            reject(`IndexedDB error: ${request.error}`);
        });
        if (typeof upgradeCallback === 'function') {
            request.onupgradeneeded = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                console.log('checkout');
                upgradeCallback(event, db);
            });
        }
    }));
}
/**
 * @param {?} dbName
 * @param {?} version
 * @param {?} storeSchemas
 * @param {?=} migrationFactory
 * @return {?}
 */
export function CreateObjectStore(dbName, version, storeSchemas, migrationFactory) {
    /** @type {?} */
    const request = indexedDB.open(dbName, version);
    request.onupgradeneeded = (/**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        const database = ((/** @type {?} */ (event.target))).result;
        storeSchemas.forEach((/**
         * @param {?} storeSchema
         * @return {?}
         */
        (storeSchema) => {
            if (!database.objectStoreNames.contains(storeSchema.store)) {
                /** @type {?} */
                const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);
                storeSchema.storeSchema.forEach((/**
                 * @param {?} schema
                 * @return {?}
                 */
                (schema) => {
                    objectStore.createIndex(schema.name, schema.keypath, schema.options);
                }));
            }
        }));
        /** @type {?} */
        const storeMigrations = migrationFactory && migrationFactory();
        if (storeMigrations) {
            Object.keys(storeMigrations)
                .map((/**
             * @param {?} k
             * @return {?}
             */
            k => parseInt(k, 10)))
                .filter((/**
             * @param {?} v
             * @return {?}
             */
            v => v > event.oldVersion))
                .sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a - b))
                .forEach((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                storeMigrations[v](database, request.transaction);
            }));
        }
        database.close();
    });
    request.onsuccess = (/**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.target.result.close();
    });
}
/** @enum {string} */
const DBMode = {
    readonly: "readonly",
    readwrite: "readwrite",
};
export { DBMode };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluZGV4ZWQtZGIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW5kZXhlZC1kYi8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaW5kZXhlZC1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHFDQUlDOzs7SUFIQSxnQ0FBYzs7SUFDZCxzQ0FBNkU7O0lBQzdFLHNDQUFpQzs7Ozs7QUFHbEMsdUNBSUM7OztJQUhBLGlDQUFhOztJQUNiLG9DQUEyQjs7SUFDM0Isb0NBQWlEOzs7OztBQUdsRCxrQ0FHQzs7O0lBRkEsaUNBQWtCOztJQUNsQiw2QkFBYzs7Ozs7O0FBRWYsd0NBRUM7OztJQURBLG9DQUFnQjs7Ozs7O0FBR2pCLGtDQUVDOzs7SUFEQSw4QkFBOEI7OztNQUd6QixTQUFTLEdBQ2QsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsbUJBQUssTUFBTSxFQUFBLENBQUMsQ0FBQyxlQUFlLElBQUksQ0FBQyxtQkFBSyxNQUFNLEVBQUEsQ0FBQyxDQUFDLFdBQVc7Ozs7Ozs7QUFFN0csTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFjLEVBQUUsT0FBZSxFQUFFLGVBQTBCO0lBQ3ZGLE9BQU8sSUFBSSxPQUFPOzs7OztJQUFjLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFOztjQUM3QyxPQUFPLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDOztZQUMzQyxFQUFlO1FBQ25CLE9BQU8sQ0FBQyxTQUFTOzs7O1FBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUNwQyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNwQixPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDYixDQUFDLENBQUEsQ0FBQztRQUNGLE9BQU8sQ0FBQyxPQUFPOzs7O1FBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUNsQyxNQUFNLENBQUMsb0JBQW9CLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQSxDQUFDO1FBQ0YsSUFBSSxPQUFPLGVBQWUsS0FBSyxVQUFVLEVBQUU7WUFDMUMsT0FBTyxDQUFDLGVBQWU7Ozs7WUFBRyxDQUFDLEtBQVksRUFBRSxFQUFFO2dCQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUN4QixlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQSxDQUFDO1NBQ0Y7SUFDRixDQUFDLEVBQUMsQ0FBQztBQUNKLENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUNoQyxNQUFjLEVBQ2QsT0FBZSxFQUNmLFlBQStCLEVBQy9CLGdCQUFrRzs7VUFFNUYsT0FBTyxHQUFxQixTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFFakUsT0FBTyxDQUFDLGVBQWU7Ozs7SUFBRyxVQUFTLEtBQTRCOztjQUN4RCxRQUFRLEdBQWdCLENBQUMsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBTyxDQUFDLENBQUMsTUFBTTtRQUUxRCxZQUFZLENBQUMsT0FBTzs7OztRQUFDLENBQUMsV0FBNEIsRUFBRSxFQUFFO1lBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTs7c0JBQ3JELFdBQVcsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO2dCQUMxRixXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU87Ozs7Z0JBQUMsQ0FBQyxNQUF5QixFQUFFLEVBQUU7b0JBQzdELFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdEUsQ0FBQyxFQUFDLENBQUM7YUFDSDtRQUNGLENBQUMsRUFBQyxDQUFDOztjQUVHLGVBQWUsR0FBRyxnQkFBZ0IsSUFBSSxnQkFBZ0IsRUFBRTtRQUM5RCxJQUFJLGVBQWUsRUFBRTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztpQkFDMUIsR0FBRzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBQztpQkFDekIsTUFBTTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUM7aUJBQ2pDLElBQUk7Ozs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDO2lCQUNyQixPQUFPOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1osZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbkQsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNsQixDQUFDLENBQUEsQ0FBQztJQUVGLE9BQU8sQ0FBQyxTQUFTOzs7O0lBQUcsVUFBUyxDQUFNO1FBQ2xDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQSxDQUFDO0FBQ0gsQ0FBQzs7QUFFRCxNQUFZLE1BQU07SUFDakIsUUFBUSxZQUFhO0lBQ3JCLFNBQVMsYUFBYztFQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0U3RvcmVNZXRhIHtcblx0c3RvcmU6IHN0cmluZztcblx0c3RvcmVDb25maWc6IHsga2V5UGF0aDogc3RyaW5nOyBhdXRvSW5jcmVtZW50OiBib29sZWFuOyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblx0c3RvcmVTY2hlbWE6IE9iamVjdFN0b3JlU2NoZW1hW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0U3RvcmVTY2hlbWEge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGtleXBhdGg6IHN0cmluZyB8IHN0cmluZ1tdO1xuXHRvcHRpb25zOiB7IHVuaXF1ZTogYm9vbGVhbjsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5leHBvcnQgdHlwZSBLZXkgPSBzdHJpbmcgfCBudW1iZXIgfCBEYXRlIHwgQXJyYXlCdWZmZXJWaWV3IHwgQXJyYXlCdWZmZXIgfCBJREJBcnJheUtleSB8IElEQktleVJhbmdlO1xuZXhwb3J0IGludGVyZmFjZSBJbmRleERldGFpbHMge1xuXHRpbmRleE5hbWU6IHN0cmluZztcblx0b3JkZXI6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdEV2ZW50VGFyZ2V0PFQ+IGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuXHRyZXN1bHQ6IFQgfCBUW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdEV2ZW50PFQ+IGV4dGVuZHMgRXZlbnQge1xuXHR0YXJnZXQ6IFJlcXVlc3RFdmVudFRhcmdldDxUPjtcbn1cblxuY29uc3QgaW5kZXhlZERCOiBJREJGYWN0b3J5ID1cblx0d2luZG93LmluZGV4ZWREQiB8fCAoPGFueT53aW5kb3cpLm1vekluZGV4ZWREQiB8fCAoPGFueT53aW5kb3cpLndlYmtpdEluZGV4ZWREQiB8fCAoPGFueT53aW5kb3cpLm1zSW5kZXhlZERCO1xuXG5leHBvcnQgZnVuY3Rpb24gb3BlbkRhdGFiYXNlKGRiTmFtZTogc3RyaW5nLCB2ZXJzaW9uOiBudW1iZXIsIHVwZ3JhZGVDYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZTxJREJEYXRhYmFzZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUsIHZlcnNpb24pO1xuXHRcdGxldCBkYjogSURCRGF0YWJhc2U7XG5cdFx0cmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRkYiA9IHJlcXVlc3QucmVzdWx0O1xuXHRcdFx0cmVzb2x2ZShkYik7XG5cdFx0fTtcblx0XHRyZXF1ZXN0Lm9uZXJyb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRyZWplY3QoYEluZGV4ZWREQiBlcnJvcjogJHtyZXF1ZXN0LmVycm9yfWApO1xuXHRcdH07XG5cdFx0aWYgKHR5cGVvZiB1cGdyYWRlQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnY2hlY2tvdXQnKTtcblx0XHRcdFx0dXBncmFkZUNhbGxiYWNrKGV2ZW50LCBkYik7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVPYmplY3RTdG9yZShcblx0ZGJOYW1lOiBzdHJpbmcsXG5cdHZlcnNpb246IG51bWJlcixcblx0c3RvcmVTY2hlbWFzOiBPYmplY3RTdG9yZU1ldGFbXSxcblx0bWlncmF0aW9uRmFjdG9yeT86ICgpID0+IHsgW2tleTogbnVtYmVyXTogKGRiOiBJREJEYXRhYmFzZSwgdHJhbnNhY3Rpb246IElEQlRyYW5zYWN0aW9uKSA9PiB2b2lkIH1cbikge1xuXHRjb25zdCByZXF1ZXN0OiBJREJPcGVuREJSZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCB2ZXJzaW9uKTtcblxuXHRyZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50OiBJREJWZXJzaW9uQ2hhbmdlRXZlbnQpIHtcblx0XHRjb25zdCBkYXRhYmFzZTogSURCRGF0YWJhc2UgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkucmVzdWx0O1xuXG5cdFx0c3RvcmVTY2hlbWFzLmZvckVhY2goKHN0b3JlU2NoZW1hOiBPYmplY3RTdG9yZU1ldGEpID0+IHtcblx0XHRcdGlmICghZGF0YWJhc2Uub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZVNjaGVtYS5zdG9yZSkpIHtcblx0XHRcdFx0Y29uc3Qgb2JqZWN0U3RvcmUgPSBkYXRhYmFzZS5jcmVhdGVPYmplY3RTdG9yZShzdG9yZVNjaGVtYS5zdG9yZSwgc3RvcmVTY2hlbWEuc3RvcmVDb25maWcpO1xuXHRcdFx0XHRzdG9yZVNjaGVtYS5zdG9yZVNjaGVtYS5mb3JFYWNoKChzY2hlbWE6IE9iamVjdFN0b3JlU2NoZW1hKSA9PiB7XG5cdFx0XHRcdFx0b2JqZWN0U3RvcmUuY3JlYXRlSW5kZXgoc2NoZW1hLm5hbWUsIHNjaGVtYS5rZXlwYXRoLCBzY2hlbWEub3B0aW9ucyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgc3RvcmVNaWdyYXRpb25zID0gbWlncmF0aW9uRmFjdG9yeSAmJiBtaWdyYXRpb25GYWN0b3J5KCk7XG5cdFx0aWYgKHN0b3JlTWlncmF0aW9ucykge1xuXHRcdFx0T2JqZWN0LmtleXMoc3RvcmVNaWdyYXRpb25zKVxuXHRcdFx0XHQubWFwKGsgPT4gcGFyc2VJbnQoaywgMTApKVxuXHRcdFx0XHQuZmlsdGVyKHYgPT4gdiA+IGV2ZW50Lm9sZFZlcnNpb24pXG5cdFx0XHRcdC5zb3J0KChhLCBiKSA9PiBhIC0gYilcblx0XHRcdFx0LmZvckVhY2godiA9PiB7XG5cdFx0XHRcdFx0c3RvcmVNaWdyYXRpb25zW3ZdKGRhdGFiYXNlLCByZXF1ZXN0LnRyYW5zYWN0aW9uKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZGF0YWJhc2UuY2xvc2UoKTtcblx0fTtcblxuXHRyZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGU6IGFueSkge1xuXHRcdGUudGFyZ2V0LnJlc3VsdC5jbG9zZSgpO1xuXHR9O1xufVxuXG5leHBvcnQgZW51bSBEQk1vZGUge1xuXHRyZWFkb25seSA9ICdyZWFkb25seScsXG5cdHJlYWR3cml0ZSA9ICdyZWFkd3JpdGUnXG59XG4iXX0=
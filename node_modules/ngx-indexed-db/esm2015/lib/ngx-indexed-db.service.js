/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-indexed-db.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { openDatabase, DBMode, CreateObjectStore } from './ngx-indexed-db';
import { createTransaction, optionsGenerator, validateBeforeTransaction } from '../utils';
import { CONFIG_TOKEN } from './ngx-indexed-db.meta';
export class NgxIndexedDBService {
    /**
     * @param {?} dbConfig
     */
    constructor(dbConfig) {
        this.dbConfig = dbConfig;
        this.indexedDB = window.indexedDB || ((/** @type {?} */ (window))).mozIndexedDB || ((/** @type {?} */ (window))).webkitIndexedDB || ((/** @type {?} */ (window))).msIndexedDB;
        if (!dbConfig.name) {
            throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');
        }
        if (!dbConfig.version) {
            throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');
        }
        CreateObjectStore(dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta, dbConfig.migrationFactory);
    }
    /**
     * @template T
     * @param {?} storeName
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    add(storeName, value, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            (db) => {
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let request;
                if (key) {
                    request = objectStore.add(value, key);
                }
                else {
                    request = objectStore.add(value);
                }
                request.onsuccess = (/**
                 * @param {?} evt
                 * @return {?}
                 */
                (evt) => {
                    key = evt.target.result;
                    resolve(key);
                });
            }));
        }));
    }
    /**
     * @template T
     * @param {?} storeName
     * @param {?} key
     * @return {?}
     */
    getByKey(storeName, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            (db) => {
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let request = objectStore.get(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve(((/** @type {?} */ (event.target))).result);
                });
                request.onerror = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    reject(event);
                });
            }));
        }));
    }
    /**
     * @template T
     * @param {?} storeName
     * @param {?} id
     * @return {?}
     */
    getByID(storeName, id) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            (db) => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let request;
                request = objectStore.get(+id);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve((/** @type {?} */ (((/** @type {?} */ (event.target))).result)));
                });
            }));
        }));
    }
    /**
     * @template T
     * @param {?} storeName
     * @return {?}
     */
    getAll(storeName) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let result = [];
                /** @type {?} */
                const request = objectStore.getAll();
                request.onerror = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    reject(e);
                });
                request.onsuccess = (/**
                 * @param {?} __0
                 * @return {?}
                 */
                function ({ target: { result: ResultAll } }) {
                    resolve((/** @type {?} */ (ResultAll)));
                });
            }));
        }));
    }
    /**
     * @template T
     * @param {?} storeName
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    update(storeName, value, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                transaction.oncomplete = (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => {
                    resolve(event);
                });
                if (key) {
                    objectStore.put(value, key);
                }
                else {
                    objectStore.put(value);
                }
            }));
        }));
    }
    /**
     * @param {?} storeName
     * @param {?} key
     * @return {?}
     */
    deleteRecord(storeName, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let request = objectStore.delete(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => {
                    resolve(event);
                });
            }));
        }));
    }
    /**
     * @param {?} storeName
     * @return {?}
     */
    clear(storeName) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                objectStore.clear();
                transaction.oncomplete = (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => {
                    resolve();
                });
            }));
        }));
    }
    /**
     * @param {?} storeName
     * @param {?} key
     * @return {?}
     */
    delete(storeName, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                objectStore['delete'](key);
            }));
        }));
    }
    /**
     * @return {?}
     */
    deleteDatabase() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const db = yield openDatabase(this.dbConfig.name, this.dbConfig.version);
            yield db.close();
            /** @type {?} */
            const deleteDBRequest = this.indexedDB.deleteDatabase(this.dbConfig.name);
            deleteDBRequest.onsuccess = resolve;
            deleteDBRequest.onerror = reject;
            deleteDBRequest.onblocked = (/**
             * @return {?}
             */
            () => {
                throw new Error("Unable to delete database because it's blocked");
            });
        })));
    }
    /**
     * @param {?} storeName
     * @param {?} cursorCallback
     * @param {?=} keyRange
     * @return {?}
     */
    openCursor(storeName, cursorCallback, keyRange) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let request = objectStore.openCursor(keyRange);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    cursorCallback(event);
                    resolve();
                });
            }));
        }));
    }
    /**
     * Open a cursor by index filter.
     * @param {?} storeName The name of the store to query.
     * @param {?} indexName The index name to filter.
     * @param {?} keyRange The range value and criteria to apply on the index.
     * @param {?} cursorCallback A callback called when done.
     * @return {?}
     */
    openCursorByIndex(storeName, indexName, keyRange, cursorCallback) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let index = objectStore.index(indexName);
                /** @type {?} */
                let request = index.openCursor(keyRange);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    cursorCallback(event);
                    resolve();
                });
            }));
        }));
    }
    /**
     * @param {?} storeName
     * @param {?} indexName
     * @param {?} key
     * @return {?}
     */
    getByIndex(storeName, indexName, key) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let index = objectStore.index(indexName);
                /** @type {?} */
                let request = index.get(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    resolve(((/** @type {?} */ (event.target))).result);
                });
            }));
        }));
    }
    /**
     * @param {?} storeName
     * @param {?=} keyRange
     * @return {?}
     */
    count(storeName, keyRange) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            openDatabase(this.dbConfig.name, this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            db => {
                validateBeforeTransaction(db, storeName, reject);
                /** @type {?} */
                let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve));
                /** @type {?} */
                let objectStore = transaction.objectStore(storeName);
                /** @type {?} */
                let request;
                request = objectStore.count(keyRange);
                request.onerror = (/**
                 * @param {?} e
                 * @return {?}
                 */
                e => reject(e));
                request.onsuccess = (/**
                 * @param {?} e
                 * @return {?}
                 */
                e => resolve(((/** @type {?} */ (e.target))).result));
            }));
        }));
    }
}
NgxIndexedDBService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxIndexedDBService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG_TOKEN,] }] }
];
if (false) {
    /** @type {?} */
    NgxIndexedDBService.prototype.indexedDB;
    /**
     * @type {?}
     * @private
     */
    NgxIndexedDBService.prototype.dbConfig;
}
//# sourceMappingURL=data:application/json;base64,